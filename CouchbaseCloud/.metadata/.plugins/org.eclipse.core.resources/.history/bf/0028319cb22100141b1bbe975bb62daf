
# Create your views here.


from libcloud.compute.types import Provider
from libcloud.compute.providers import get_driver

import json

from couchbase import Couchbase
from couchbase import *

import subprocess
import os


import ConfigParser
from time import sleep

import sys

import copy

def main():
    cb = Couchbase.connect(bucket="default", host="localhost")

    while True:
        try:
            request = cb.get("DeploymentRequest").value
        except:
            continue
        
        if request['status'] == "RD":
            location = request['loc']
            
            if  location == 'East':
                cls = get_driver(Provider.EC2_US_EAST)
                
            AWS_EC2_ACCESS_ID = request['ackey']
            AWS_EC2_SECRET_KEY = request['seckey']
            
            driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)
            
            ACCESS_KEY_NAME = request['keyname']
            
            
            sizes = driver.list_sizes()
            
            for size in sizes:
                print size
            
            MY_SIZE = request['machine']
            MY_IMAGE = 'ami-76817c1e'
            
            
            size = [s for s in sizes if s.id == MY_SIZE][0]
            
            image = driver.get_image(MY_IMAGE)
            
            print image
            print size
            
            y = request['cpus']
            a=0
            
            n = int(y)
            nodes = list()
            while a < n :
                node = driver.create_node(name="Test{0}".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)
                nodes.append(node)
                a = a+1;  
            
            nodesup = list()    
            for node in nodes :
                while node.state != 0 :
                    regionNodes = driver.list_nodes() 
                    node = [val for val in regionNodes if val.id == node.id][0]
                    continue
                nodesup.append(node)
            
            for node in nodesup:
                print node.__dict__
            
            
            bucket =[]
            vms = []
            
            for node in nodesup :
                vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})
                
            bucket.append ({ 'name' : "default", 'vm':vms });
            
            result = cb.get("user::{0}".format(request['username'])).value
            
            print "hehhr" 
            print result
            
            
            try :
                store = result
                result = json.loads(result)
            except:
                result = store
            
            request['status'] = "DE"        
            
            if result['deploy'] == None:
                print "1"
                result['deploy'] = [{'request':request, 
                                     'bucket': bucket}]
            else :
                print "2"
                result['deploy'].append({'request':request, 'bucket' : bucket})
            
            
            print result       
            
            cb.set("DeploymentRequest",request)
            cb.set("user::{0}".format(request['username']), result)
               
            aws_mkfile(nodesup,request['username'] )
                
          

def convert_node_ip_string(st):
        a = "{0}".format(st)
        a = a.replace('[', '')
        a = a.replace('\'','')
        a = a.replace(']','')
        return a
    

def aws_mkfile(nodesup, user):

    filekey = open("/tmp/{0}.pem".format(user), "w")
    
    cfgfile = open("/tmp/test.ini",'w')
    
    Config = ConfigParser.ConfigParser()
    
    Config.add_section('global')
    Config.set('global','username','ec2-user')
    Config.set('global','ssh_key', "/tmp/{0}.pem".format(user))
    Config.set('global','port', "8091")
    
    Config.add_section('servers')
    
    count = 1
    for node in nodesup:
        a = convert_node_ip_string(node.public_ips)
        Config.set('servers', "{0}".format(count),"{0}".format(node.__dict__['extra']['dns_name']))
        count = count +1
    
    Config.add_section('membase')
    Config.set('membase','rest_username',"Administrator")
    Config.set('membase','rest_password', "password")
    
    
    Config.write(cfgfile)
    cfgfile.close()


if __name__ == "__main__":
    main()
