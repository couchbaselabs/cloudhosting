
# Create your views here.

from django.shortcuts import render_to_response
from django.contrib.auth import authenticate, login

from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse

from libcloud.compute.types import Provider
from libcloud.compute.providers import get_driver

import json

from couchbase import Couchbase
from couchbase import *

import subprocess
import os
from django.conf import settings

import Configparser

@csrf_exempt  
def auth_user(request):
    state = "Please log in below..."
    return render_to_response('auth.html',{'state':state})

@csrf_exempt
def login_user(request):
    state = "Please log in below..."
    username = password = ''
    if request.POST:
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                state = "You're successfully logged in!"
            else:
                state = "Your account is not active, please contact the site admin."
        else:
            state = "Your username and/or password were incorrect."
            return render_to_response("message.html",{'state':state, 'username': username})

    return render_to_response("auth.html",{'state':state, 'username': username})

@csrf_exempt
def register_user(request):
    return render_to_response('registration.html')

@csrf_exempt
def create_account(request):
    
    cb=Couchbase.connect(bucket='default', host='localhost')
    
    uname = request.POST.get('username')
    password = request.POST.get('password')
    accountname = request.POST.get('accountName')
    email = request.POST.get('email')
    
    
    value = {'username' : uname, 
             'password1':password,  
             'accountName':accountname,
             'email' :email,
             'deploy':None}
    
    print value['username']
    
    cb.set("user::{0}".format(uname),json.dumps(value))
                                              
    
    result = cb.get("user::{0}".format(uname)).value
    
    
    
    result = json.loads(result)
    print result['username']

    if result['deploy'] == None:
        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]
    else :
        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})
    
    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              
                        
    
    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})
    cb.set("user::{0}".format(uname), result)

    result = cb.get("user::{0}".format(uname)).value
    
    print result

    return render_to_response('deployments.html')

@csrf_exempt
def couchdep(request) :    
    return render_to_response('couchdbdep.html')


@csrf_exempt
def deploy(request):
    
    '''
    location = request.POST.get("loc")
    
    if  location == 'East':
        cls = get_driver(Provider.EC2_US_EAST)
    
    AWS_EC2_ACCESS_ID = "AKIAIM32BEWJ4F2K2VGQ"
    AWS_EC2_SECRET_KEY = "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"
    
    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)
    
    ACCESS_KEY_NAME = 'piushs'
    
    
    sizes = driver.list_sizes()
    
    for size in sizes:
        print size
    
    MY_SIZE = 'm3.large'
    MY_IMAGE = 'ami-76817c1e'
    
    
    size = [s for s in sizes if s.id == MY_SIZE][0]
    
    image = driver.get_image(MY_IMAGE)
    
    print image
    print size
    
    y = request.POST.get("cpus")
    a=0
    
    n = int(y)
    nodes = list()
    while a < n :
        node = driver.create_node(name="Test{0}".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)
        nodes.append(node)
        a = a+1;
    
    nodesup = list()    
    for node in nodes :
        while node.state != 0 :
            regionNodes = driver.list_nodes() 
            node = [val for val in regionNodes if val.id == node.id][0]
            continue
        nodesup.append(node)
    
    for node in nodesup:
        print node
    '''   
    
    '''
    path = os.getcwd() 
    print path
    os.chdir(path + "/auth/testrunner")
    os.system('pwd')
    
    os.system('python scripts/install.py -i /tmp/ubuntu.ini -p product=cb,version=3.0.0-966-rel,amazon=true')
    os.chdir(path)
    '''
    
    cfgfile = open("/tmp/test.ini",'w')
    Config.add_section('Person')
    Config.set('Person','HasEyes',True)
    Config.set('Person','Age', 50)
    Config.write(cfgfile)
    cfgfile.close()
    
    
    return HttpResponse("Deployment Successful")