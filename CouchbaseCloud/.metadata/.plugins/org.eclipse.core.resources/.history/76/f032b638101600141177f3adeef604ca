<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html id=''>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  


<!-- General -->
<meta content='cloud database, cloud database hosting, mongo, mongodb, hosted mongo, hosted mongodb, mongodb hosting, host mongodb, host mongo, mongo hosting, heroku mongo, heroku mongodb, mongodb gui' name='Keywords' />

<!-- MongoLab Base -->
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=1044" />

<!-- keywords -->
<meta content='cloud database, cloud database hosting, mongo, mongodb, hosted mongo, hosted mongodb, mongodb hosting, host mongodb, host mongo, mongo hosting, heroku mongo, heroku mongodb, mongodb gui' name='Keywords' />

<!-- favicon -->
<link href="/base/img/favicon.ico" rel="shortcut icon" type="image/x-icon" />

<!-- fonts -->
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Droid+Sans" />
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,300" />
<link rel="stylesheet" type="text/css" href="/base/css/webfonts/MyFontsWebfontsKit.css" />

<!-- jQuery Library and jQuery UI Tools -->
<!-- (downloaded from: http://cdn.jquerytools.org/1.2.7/full/jquery.tools.min.js) -->
<script type="text/javascript" src="/base/js/jquery.tools.min-1.2.7.js"></script>

<!-- YUI reset css -->
<link rel="stylesheet" type="text/css" href="/base/css/yui-2.9.0-reset-fonts-grids.css" />

<!-- custom CSS -->
<link rel="stylesheet" type="text/css" href="/base/css/mongolab-base.min.css" />

<!-- custom Javascript -->
<script type="text/javascript" encoding="utf-8">

  function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
  }


  function gotoSignupWithSourceParam(url) {
    var paramName = "s"
    var paramValue = getUrlVars()[paramName]
    if (url == null) {
      if (typeof window.DEFAULT_SIGNUP_URL === 'undefined') {
        DEFAULT_SIGNUP_URL = "/signup"
      }
      url = DEFAULT_SIGNUP_URL
    }
    if (paramValue) {
      if (url.indexOf('?') > -1) {
        url += "&" + paramName + "=" + paramValue
      }
      else {
        url += "?" + paramName + "=" + paramValue
      }
    }
    //alert(url)
    window.location.href=url
  }

  function getParameterByName(name) {
  name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
  var regexS = "[\\?&]" + name + "=([^&#]*)";
  var regex = new RegExp(regexS);
  var results = regex.exec(window.location.search);
  if(results == null)
  return "";
  else
  return decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  function hideAccountLinks() {
  $("#headerAccountLink").hide();
  $("#headerAccountLinks").hide();
  }

  function showAccountLinks() {
  $("#headerAccountLink").show();
  $("#headerAccountLinks").show();
  }

  function hideSignupRelatedLinks() {
  $("#headerLoginLink").hide();
  $("#headerSignupLink").hide();
  $("#preFooterBar .links").hide();
  }

  function showHomeLink() {
  $("#headerHomeLink").show();
  }

  function showSignupRelatedLinks() {
  $("#headerLoginLink").show();
  $("#headerSignupLink").show();
  $("#headerWelcomeLink").hide();
  $("#headerLogoutLink").hide();
  }

  function showLogoutLink() {
  hideSignupRelatedLinks();
  $("#headerWelcomeLink").show();
  $("#headerLogoutLink").show();
  }

  function hideLoginLink() {
  $("#headerLoginLink").hide();
  }

  function hideLogoutLink() {
  $("#headerWelcomeLink").hide();
  $("#headerLogoutLink").hide();
  }

  function hideSignupLink() {
  $("#headerSignupLink").hide();
  }

  function hideMarketingContent() {
  $("li.marketingLinks").hide();
  $("a.marketingLink").hide();
  $("div.marketingContent").hide();
  }

  $(document).ready(function() {
  // have all external links  go to new tab
  $("a[href^='http:']").attr("target", "_blank");
  $("a[href^='https:']").attr("target", "_blank");
  $("a[href^='http://mongolab.com']").attr("target", "_self");
  $("a[href^='https://mongolab.com']").attr("target", "_self");
  $("a[href^='http://mongodb-inc.mongolab.com']").attr("target", "_self");
  $("a[href^='https://mongodb-inc.mongolab.com']").attr("target", "_self");

  // if landing page
  if (location.pathname.indexOf('/lp/') == 0) {
  hideLoginLink();
  }

  $("#header .links").show();

  // ensures that any links with /signup are done correctly
  $("a[href*='/signup']").click(function(){
    $(this).removeAttr("href");
    $(this).css("cursor", "pointer");
    gotoSignupWithSourceParam(null);
  })

  })
</script>



<!-- CSRF -->
<script src="/csrf.js"></script>

<!-- OLABS  -->
<script src="/js/objectlabs/escape.js" type="text/javascript" encoding="utf-8"></script>
<script src="/js/objectlabs/olabs-util.js" type="text/javascript" encoding="utf-8"></script>
<script src="/js/objectlabs/dynamic-portal.js" type="text/javascript" encoding="utf-8"></script>

<!-- JSON -->
<script src="/js/json-util/json2.js" type="text/javascript" encoding="utf-8"></script>

<!-- jQuery UI -->
<link href="/css/jquery-ui/smoothness/jquery-ui-1.8.custom.css" rel="stylesheet" type="text/css" />
<script src="/js/jquery-ui/jquery-ui-1.8.2.custom.min.js" type="text/javascript"></script>

<!-- jQuery plugins -->
<script src="/js/jquery-plugins/jquery.validate.min.js" type="text/javascript"></script>
<script src="/js/jquery-plugins/jquery.safeEnter.min.js" type="text/javascript"></script>
<script src="/js/jquery-plugins/jquery.curvycorners.packed.js" type="text/javascript"></script>

<!-- Other Javascript packages -->
<script src="/js/codemirror-3/codemirror-compressed.js"></script>
<script src="/js/codemirror-3/mongolab.js"></script>
<script src="/js/spinjs/spin.min.js" type="text/javascript" encoding="utf-8"></script>

<!-- Google web fonts -->
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Droid+Sans+Mono" />
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,300" />

<!-- Graphing packages -->
<link rel="stylesheet" href="/css/rickshaw/graph.css">
<link rel="stylesheet" href="/css/rickshaw/detail.css">
<link rel="stylesheet" href="/css/rickshaw/legend.css">
<script src="/js/d3/d3.v3.min.js" type="text/javascript"></script>
<script src="/js/rickshaw/rickshaw.min.js" type="text/javascript"></script>
<script src="/js/rickshaw/Rickshaw.Color.Palette.js" type="text/javascript"></script>



<!-- Custom CSS -->
<link href="/css/main.css" rel="stylesheet" type="text/css" />

    <link href="/base/css/small-header.css" rel="stylesheet" type="text/css" />

<link rel="stylesheet" href="/css/codemirror-3.css">

<!-- Custom Javascript -->
<script src="/js/objectlabs/resource.js" type="text/javascript"></script>

<!-- More custom Javascript -->
<script type="text/javascript" encoding="utf-8">

// Make IE work
$.support.cors = true;

//
// When the DOM is fully loaded...
//
$(document).ready(function() {

    //
    // If title and/or meta description doesn't exist, add the default one(s)
    //
    jQuery.fn.exists = function(){return jQuery(this).length>0;}
    if (!$("head meta[name='Description']").exists()) {
        $("head").prepend("<meta content='MongoLab is the market-leading MongoDB database-as-a-service platform that fully automates the operational aspects of running MongoDB. MongoLab runs on all the major cloud providers, including Amazon, Joyent, Rackspace and Windows Azure.' name='Description' />");
    }
    if (!$("head title").exists()) {
        $("head").prepend("<title>MongoLab: MongoDB-as-a-Service</title>");
    };
    //alert ($("head meta[name='Description']").attr("content"));

    //
    // Round corners
    //
    // NOTE: jquery.curvycorners does not work with input tags in IE,
    // so jQuery UI's ui-corner-all class was used
    //
    $("input[type='text'], input[type='password'], textarea").addClass("ui-corner-all");
    $(".account").addClass("roundedCorners");
    $("#modalLoadingIndicator").addClass("roundedCorners");
    $("#keyMetadata").addClass("roundedCorners");
    $("#secondaryDataWarning").addClass("roundedCorners");
    $(".connectionInfo").addClass("roundedCorners");
    $(".specificHelp").addClass("roundedCorners");
    $(".inlineHelp").addClass("roundedCorners");
    if(!$.browser.msie) {
        $(".cluster-summary").addClass("roundedCorners");
        $(".connection-summary").addClass("roundedCorners");
    }

    //
    // Apply the 'pointer' cursor to rows that don't have the 'nolink' class
    //
    $("tr[class='even']").addClass("link");
    $("tr[class='odd']").addClass("link");

    //
    // Remove the onclick attribute from rows that have the 'nolink' class
    //
    $("tr.nolink").removeAttr("onclick");

    //
    // Apply the 'help' cursor to anything with a mouseover specified
    //
    $("*[onmouseover]").addClass("help");

    //
    // Add 'title' to disabled butons
    //
    $("a.button.disabled").attr("title", "Disabled button. Please click to learn why.");

    //
    // Have all external links  go to new tab
    //
    $("a[href^='http:']").attr("target", "_blank");

    //
    // Give focus to the first visible input tag
    //
    $("input:visible:first").focus();

    //
    // Listen for the 'Enter' key inside of all forms
    //
    $("form").not(".noSubmitOnEnter")
            .listenForEnter().bind("pressedEnter", function() {

                // if the form is valid
                if ($(this).valid()) {

                    // click on all 'a' tags with class 'button' in the form
                    $("form a.button").click();
                    $("form a.blueButton").click();
                    $("form input.submit").click();

                    // click on the first button in any visible jQuery UI
                    // Dialog button pane - the first button will always be the
                    // submit button
                    $(".ui-dialog-buttonpane:visible button:first").click();
                }
            });

    //
    // Listen for the 'Enter' key inside of all message dialogs
    //
    $(".ui-dialog.msgDialog").listenForEnter().bind("pressedEnter", function() {
        $(".ui-dialog .ui-dialog-buttonpane:visible button:first").click();
    });

    //
    // Allow tabbing to occur to buttons
    //
    $("a.button").attr("tabindex", "0");

    //
    // Unhighlight the submit buttons in the following two cases where
    // pressing the 'Enter' key does not submit:
    // (1) delete confirmation, (2) HTTP POST
    //
    $("button:contains('Delete')").addClass("noSubmitOnEnter");
    $("button:contains('Issue POST')").addClass("noSubmitOnEnter");

    //
    // Define a general MongoDB custom validator
    //
    $.validator.addMethod("mongoDBName", function( value, element ) {
        var result = this.optional(element) || ( value.length < 80  && (/[$."]+/.test(value) == false) );
        return result;
    }, "The name you choose must have fewer than 80 characters and cannot have double quotes.  In addition, $ and . are reserved characters in MongoDB.");

    //
    // Define a database name custom validator
    //
    $.validator.addMethod("databaseName", function( value, element ) {
        var result = this.optional(element) || ( value.length < 64  &&
                /^([a-z0-9_-])*$/.test(value) &&
                [ 'admin', 'config', 'system' ].indexOf(value) < 0 );
        return result;
    }, "The name you choose must be lowercase.  It also must have fewer than 64 characters and cannot have any spaces or special characters (hyphens and underscores are OK) in it. It cannot be 'admin', 'config', or 'system'");

    //
    // Define a collection name custom validator
    //
    $.validator.addMethod("collectionName", function( value, element ) {
        var result = this.optional(element) || ( value.length < 80 && (value.indexOf('system.') != 0) && (value.indexOf('objectlabs-system.') != 0) && /^([A-Za-z_])+([A-Za-z0-9_-]|\.)*$/.test(value) );
        return result;
    }, "The name you choose must begin with a letter or underscore and must not begin with 'system.' or 'objectlabs-system.'.  It also must have fewer than 80 characters and cannot have any spaces or special characters (hyphens, underscores and periods are OK) in it.");

    //
    // Override the 'password' validator
    //
    $.validator.addMethod("password", function( value, element ) {
        var result = this.optional(element) ||
                value.length >= 6 && /\d/.test(value) && /[a-z]/i.test(value);
        if (!result) {
            element.value = "";
        }
        return result;
    }, "Your password must be at least 6 characters long and contain at least one number and one character.");

    //
    // Round to 3 decimal places
    //
    $(".round").round();

    //
    // Add commas to numbers; also, columns that are numbers don't wrap
    //
    $(".number").commas();
    $(".number").attr("nowrap", true);

    // apply expand effect to connection info boxes
    $(".connectionInfo").filter( function() {
        var contentWidth = $("#connectionInfoContent").width();
        var currentWidth = $(this).width();
        return contentWidth > currentWidth;
    } ).each( function() {
                $(this).append('<div id="horizontalFade"></div>');
                $(this).hover(
                        function() {
                            var contentWidth = $(this).find("span:first").width();
                            $(this).css("border-style", "solid");
                            $(this).stop().animate(
                                    { "width": contentWidth },
                                    { "complete" : function() { $(this).find("#horizontalFade").hide(); } }
                            );
                        },
                        function() {
                            $(this).css("border-style", "dotted");
                            $(this).after('<div class="connectionInfo" style="padding-top: 0; padding-bottom: 0; margin-top: 0; margin-bottom: 0; height: 0;"></div>');
                            var normalWidth = $(this).next().width();
                            var $fader = $(this).find("#horizontalFade");
                            var $this = $(this);
                            $(this).next().remove();
                            if( $(this).width != normalWidth ) {
                                $fader.show();
                                $this.stop().animate( { "width": normalWidth } );
                            }
                        }
                );
            });

    // Reset #body height
    resetBodyHeight();

}); // END $(document).ready()

//
// Constants
//
var JSON_DISPLAY_SIZE_LIMIT = 300000;
var JSON_TRUNCATE_SIZE = 30000;

//
// Initialize a jQuery UI Modal Message Dialog
// (just an 'OK' button)
//
function initMsgDialog(dialogId, width, height, okFunction) {
    $(dialogId).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            OK: function() {
                if(okFunction) {
                    okFunction();
                } else {
                    $(this).dialog('close');
                }
            }
        },
        width: width,
        height: height,
        maxWidth: 1000
    });

    $(dialogId).parent().addClass("msgDialog");
}

//
// Initialize a jQuery UI Modal Message Dialog
// ('Yes'/'No')
//
function initYesNoDialog(dialogId, width, height, noFunction, yesFunction) {
    $(dialogId).dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            Yes: function() {
                if(yesFunction) {
                    yesFunction();
                }
                $(this).dialog('close');
            },
            No: function() {
                if(noFunction) {
                    noFunction();
                }
                $(this).dialog('close');
            }
        },
        width: width,
        height: height,
        maxWidth: 1000
    });

    $(dialogId).parent().addClass("yesNoDialog");
}

function showConfirmDialog(message, yesFunction, title) {
    title = title || "Confirm";
    var confirmDialog = $('<div title="'+ title + '"><p>' + message + '</p></div>');
    confirmDialog.dialog({ autoOpen: false,
        modal: true,
        buttons: {
            Yes: function() {
                if(yesFunction) {
                    yesFunction();
                }
                $(this).dialog('close');
            },
            Cancel: function() {
                $(this).dialog('close');
            }
        },
        maxWidth: 1000
    });

    confirmDialog.parent().addClass("yesNoDialog");
    confirmDialog.dialog('open');
}
//
// Initialize a jQuery UI Modal Form Dialog w/ a CodeMirror JSON editor
//
function initEditorDialog(dialogId, editor, hiddenInputName, submitLabel) {
    var buttons = {};

    buttons[submitLabel] = function () {

        // if form is valid, show the loading indicator
        if ($(this).valid()) {
            $("div.loadingIndicator").show();
        }

        // set the form's hidden input to be the contents of the editor's
        // textbox
        var json = $(dialogId).data(editor).getValue();
        $("input[name='"+hiddenInputName+"']").val(json);

        // validate the JSON; if valid, submit the form
        try {
            var jsonObj = JSON.parse(json);
        }
        catch (e) {

            // if JSON is invalid, remove the loading indicator and display
            // the JSON Validation Error modal dialog (defined in header.jsp)
            $("div.loadingIndicator").hide();
            openDialog("#jsonErrorDialog", null);
            return;
        }

        $(this).submit();
    };

    buttons["Cancel"] = function () {
        $(".message.error").remove();
        $(dialogId).dialog('close');
    };

    $(dialogId).dialog( {
        autoOpen: false,
        modal: true,
        buttons: buttons
    });
}

//
// Initialize a jQuery UI Modal Form Dialog
// with custom width & height
//
function initDialog(dialogId, submitLabel, width, height) {

    var buttons = {};

    buttons[submitLabel] = function () {
        if ($(this).valid()) {
            $("div.loadingIndicator").show();
        }

        $(this).submit();
    };

    buttons["Cancel"] = function () {
        $(".message.error").remove();
        $(dialogId).dialog('close');
    };

    $(dialogId).dialog( {
        autoOpen: false,
        modal: true,
        buttons: buttons,
        width: width,
        height: height,
        position: 'center'
    });
}
function createPlainDialog(dialogId, width, height) {
    $(dialogId).dialog( {
        autoOpen: false,
        modal: true,
        width: width,
        height: height,
        position: 'center'
    });
}
//
// Add loading indicator wheel to dialogs
// NOTE: this must be called AFTER the dialog is initialized
//
function addLoadingIndicator() {
    $(".ui-dialog .ui-dialog-buttonpane:not(:has(div.loadingIndicator))").
            append("<div class='loadingIndicator'></div>");
}

function parseMongoUri(uri) {
    if(!uri) {
        return null;
    }
    var scheme = "mongodb://";
    if(uri.indexOf(scheme) != 0) {
        return null;
    }

    uri = uri.substring(scheme.length, uri.length);

    var username_part = null;
    var password_part = null;
    var address_part = null;
    var db_part = null;
    var params_part = null;

    var params_pos = uri.indexOf("?");
    if(params_pos < 0) {
        address_part = uri;
    } else {
        params_part = uri.substring(params_pos+1);
        address_part = uri.substring(0,params_pos);
    }

    var auth_pos = address_part.indexOf("@");
    if(auth_pos >= 0) {
        var auth_parts = address_part.substring(0,auth_pos).split(":");
        if(auth_parts.length != 2) {
            return null;
        }
        username_part = auth_parts[0];
        password_part = auth_parts[1];
        address_part = address_part.substring(auth_pos+1);

    }

    var db_pos = address_part.indexOf("/");
    if(db_pos >= 0) {
        db_part = address_part.substring(db_pos+1);
        address_part = address_part.substr(0,db_pos);
    }

    if(!address_part) {
        return null;
    }

    return {"address":address_part,
        "db" : db_part,
        "params" : params_part,
        "username" : username_part,
        "password" : password_part};
}

$.validator.addMethod("mongouri", function(value, element) {
    return parseMongoUri(value);
}, "Invalid MongoDB URI format");

//
// Validate the specified form
//
function validateForm(formId) {
    $(formId).validate({
        onkeyup: false,
        messages: {
            password2: {
                equalTo: "Please enter the same password as above."
            }
        }
    });
}

//
// Open the specified jQuery UI Dialog
//
function openDialog(dialogId, e) {

    if (e != null) {
        if (!e) var e = window.event;
        e.cancelBubble = true;
        if (e.stopPropagation) {
            e.stopPropagation();
        }
    }

    $(dialogId).dialog('open');

    $(dialogId).find("input:visible:first").focus();
}

//
// Open the specified jQuery UI Dialog and CodeMirror JSON editor
//
function openDefaultEditorDialog(dialogId, textAreaId, defaultJSONStr, e) {

    openDialog(dialogId, e);

    openCodeMirrorEditor(dialogId, textAreaId, defaultJSONStr, true, "273px", "100px");
}

function openEditorDialog(dialogId, textAreaId, defaultJSONStr, width, height, e) {

    openDialog(dialogId, e);

    openCodeMirrorEditor(dialogId, textAreaId, defaultJSONStr, true, width, height);
}

function openCodeMirrorEditor(editorId, textAreaId, defaultJSONStr, prettyFlag, width, height) {

    var $textarea = $("#"+textAreaId);
    if($textarea.hasClass("codemirrored")) {
        return;
    }
    CodeMirror.defineInitHook(initCallback);
    myCodeMirror = CodeMirror.fromTextArea(document.getElementById(textAreaId), {
        mode: { name: 'javascript', json: true },
        theme: 'mongolab',
        keyMap: "mongolab",
        indentUnit: 4,
        tabSize: 4,
        lineNumbers: false,
        showCursorWhenSelecting: true,
        matchBrackets: true,
        lineWrapping: true
    });
    $textarea.addClass("codemirrored");

    // set initial value
    var jsonStr = $textarea.val();
    if (jQuery.trim(jsonStr) == "") {
        jsonStr = defaultJSONStr;
    }
    if (prettyFlag) {
        jsonStr = prettifyJSONStr(jsonStr);
    }
    myCodeMirror.setValue(jsonStr);

    // set width & height
    myCodeMirror.setSize(width, height);

    $(editorId).data(textAreaId, myCodeMirror);
}

function initCallback() {
    // empty by default
}

/**
 * Return a pretty JSON string given a JSON string
 *
 * @param {?String} jsonStr the JSON string to be prettified
 * @param {String=} space optional whitespace string
 * @returns {?String} the pretty JSON string
 */
function prettifyJSONStr(jsonStr, space) {
    space = space || "    ";
    var prettyJSON = "";
    try {
        if (jsonStr && jQuery.trim(jsonStr) !== "") {
            prettyJSON = JSON.stringify(JSON.parse(jsonStr), null, space);
        }
    }
    catch (e) {
        return jsonStr;
    }
    return prettyJSON;
}

//
// Return a pretty JSON string given a JSON object
//
function prettifyJSONObj(jsonObj) {
    var prettyJSON = "";

    try {
        if (jsonObj != null) {
            prettyJSON = JSON.stringify(jsonObj, null, "    ");
        }
    }
    catch (e) { alert("prettifyJSONObj -" + e); }

    return prettyJSON;
}

//
// Show the specified help box
//
function showHelp (topic, event) {
    var $help = $(".specificHelp:has(h1:contains("+topic+"))");
    if($help.css("opacity") == 0 || $help.css("display") == "none") {
        positionSpecificHelp($help, event);
    }
    var numShown = $(".specificHelp.showing").length;
    $help.addClass("showing");
    $help.css("z-index", numShown * 2 + 100);
    $help.stop().fadeTo("normal", 1);
    var $otherHelp = $(".specificHelp.showing").not(":has(h1:contains("+topic+"))");
    $otherHelp.stop().fadeTo("normal", 0.3);
    var $generalHelp = $(".generalHelp:visible");
    $generalHelp.stop().fadeTo("normal", 0.2);
}

function bindSpecificHelp( $jquerySet, topic ) {
    $jquerySet.addClass('help');
    $jquerySet.hover(
            function(event) {
                showHelp(topic, event);
            },
            function() {
                hideHelp(topic);
            }
    );
}

//
// Hide the specified help box
//
function hideHelp (topic) {
    var $help = $(".specificHelp:has(h1:contains("+topic+"))");
    $help.removeClass("showing");
    $help.stop().fadeTo("normal", 0, function() { $help.hide() });
    if($(".specificHelp.showing").length == 0) {
        var $generalHelp = $(".generalHelp:visible");
        $generalHelp.stop().fadeTo("normal", 1);
    } else {
        // find showing help with highest z-index
        var max = 0;
        var $newHelp = null;
        $(".specificHelp.showing").each(function() {
            var z = $(this).css("z-index");
            if(z > max) {
                max = z;
                $newHelp = $(this);
            }
        });
        if($newHelp.length) {
            $newHelp.stop().fadeTo("normal", 1);
        }
    }
}

function positionSpecificHelp($help, event) {
    var top = event.pageY - Math.round($help.height() / 2);
    var min = $("#header").height() + 5;
    var max = $(window).scrollTop() + $(window).height() - $help.height() - 40 - 10;
    if(max < 0) {
        max = 0;
    }
    if(top > max) {
        top = max;
    }
    if(top < min) {
        top = min;
    }
    $help.css("top", top);
}

function toggleInlineHelp(id) {
    var $div = $("#"+id);
    if($div.hasClass("showing")) {
        hideInlineHelp(id);
    } else {
        showInlineHelp(id);
    }
}

function showInlineHelp(id) {
    var $div = $("#"+id);
    if(!$div.hasClass("showing")) {
        hideInlineHelp();
        $div.addClass("showing");
        $div.slideDown();
    }
}

function hideInlineHelp() {
    var $helps = $(".inlineHelp.showing");
    $helps.removeClass("showing");
    $helps.slideUp();
}

function closeInlineHelp() {
    var $helps = $(".inlineHelp.showing");
    $helps.removeClass("showing");
    $helps.hide();
}

function centerDiv(selector) {
    $(selector).css('top', Math.max(0, (($(window).height() - $(selector).outerHeight()) / 2) + $(window).scrollTop()) + "px");
    $(selector).css('left', Math.max(0, (($(window).width() - $(selector).outerWidth()) / 2) + $(window).scrollLeft()) + "px");
}

//
// Open the specified Modal Loading Indicator (defined in header.jsp)
//
function openModalLoadingIndicator(formId, title) {
    // if the specified form is valid
    if ($(formId).valid()) {

        // show the mask
        $('#modalMask').show();
        $('#modalMask').fadeTo("fast", 0.6);

        // set the specified title
        $("#modalLoadingIndicator .title").html(title);

        // center the modal loading indicator
        centerDiv("#modalLoadingIndicator");
        $("#modalLoadingIndicator").show();
    }
}

function closeModalLoadingIndicator() {
    $('#modalMask').hide();
    $("#modalLoadingIndicator").hide();
}

//
// Function to add commas to numbers
//
$.fn.commas = function() {
    return this.each(function(){
        $(this).text( $(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") );
    })
}

//
// Function to round to 3 decimal places
//
$.fn.round = function() {
    return this.each(function(){
        $(this).text( $(this).text(parseFloat($(this).text()).toFixed(3)));
    })
}

//
// Function to dynamically reset the #body height
//
function resetBodyHeight() {
    // 1500 is the sum of the padding-top & padding-bottom as specificied in main.css
    var height = window.innerHeight - $("#header").outerHeight() - $("#preFooterBar").outerHeight() - $("#footer").outerHeight() - 150;
    $("#body").css("min-height", height)
}

var CURRENT_PATH_INFO = [];










function getEntityUrl(entityType) {
    var url = "";
    var documentId = null;

    for(var i in CURRENT_PATH_INFO) {
        var k = CURRENT_PATH_INFO[i]["type"];
        var name = CURRENT_PATH_INFO[i]["name"];
        if(k != "document") {
            url += '/' + k + 's/' + name;
        } else {
            documentId = name;
        }

        if(k == entityType || (k == "connection" && CURRENT_PATH_INFO[i]["connectionType"] == entityType)) {
            break;
        }
    }

    if(documentId) {
        url += '/'+documentId;
    }

    return url;
}

function getRootApiUrl() {
    
    
    return "https://api.mongolab.com/api/1";
    
    
    
}

function getApiUrl(resourceType) {
    return getRootApiUrl()+getEntityUrl(resourceType);
}


var BACKUP_API_URL = "https://mongolab.com/mbs";
var PAGE_ERRORS = {};
</script>







  <script src="/js/objectlabs/home-landing.js" type="text/javascript" encoding="utf-8"></script>
</head>

<body id="homeLanding">









<div id="header">
  <div class="wrap">
    <div class="logo">
      <a href="/">MongoLab</a>
    </div>
    <div class="links" style="display:none;">
      <a id="headerWelcomeLink" href="/welcome" class="marketingLink" style="display:none;">Welcome</a>
      <a href="/plans" class="marketingLink">Plans & Features</a>
      <a href="/plans/pricing" class="marketingLink">Pricing</a>
      <a id="docPortalLink" href="http://docs.mongolab.com" target="_blank">Docs & Support</a>
      <a id="createTicketLink" href="https://support.mongolab.com/anonymous_requests/new" target="_blank" style="display:none;">Support</a>
      <a id="headerAccountLink" href="/account-details" style="display:none;">Account</a>
      <a id="headerSignupLink" onclick="gotoSignupWithSourceParam();" class="signup">Sign up</a>
      <a id="headerHomeLink" href="/home" class="login" style="display:none;">Manage</a>
      <a id="headerLoginLink" href="/login" class="login">Log in</a>
      <!-- To protect against use in a CSRF attack, logout should be a POST, so we need a simple form here rather than
           a straight link. We use a form outside of / after the links to avoid breaking up the style. -->
      <a id="headerLogoutLink" onclick="document.getElementById('headerLogoutForm').submit();" class="login" style="display:none;">Log out</a>
      <form id="headerLogoutForm" method="POST" action="/logout"></form>
    </div>
  </div>
</div>



  <!-- if not logged in -->
  
  
  <!-- if logged in -->
  
    
    
      
        <script type="text/javascript">showLogoutLink(); showAccountLinks();</script>
      
      
    

    
    
    <!-- if not ok to have a billing relationship -->
    
    
    <!-- Account Links -->
    <div id="headerAccountLinks">
      { <span>user</span>: "<a href="/user?username=pasrivas">pasrivas</a>", <span>account</span>: "<a href="/account-details/">testpiush</a>" }
    </div>
  

  


<!-- Modal Loading Indicator -->
<div id="modalLoadingIndicator" style="display: none;">
  <div>
    <div class="title">[This is the title]</div>
    <div class="loadingIndicatorBig"></div>
  </div>
</div>
<div id="modalMask"></div>

<!-- Modal JSON Validation Error Dialog -->
<div id="jsonErrorDialog" title="JSON Validation Error" style="display: none;">
  <span class="ui-icon ui-icon-alert"></span>
  We encountered an error while parsing your JSON.  Please check your syntax (e.g. ensure you are using double quotes around both your field names and values) and try again.
</div>

<script type="text/javascript">

  //
  // Mailto specified address and include username, if available
  //
  function mailto(subject) {
    var email = encodeURIComponent("MongoLab Support <support@mongolab.com>");
    var username = 'pasrivas';
    var account = 'testpiush';
    var body = encodeURIComponent('{ user : "'+username+'", account : "'+account+'" }');
    if (subject == null) {
      subject = " ";
    } else {
      subject = encodeURIComponent(subject);
      }
    if (username == null || username == "" || account == null || account == "") {
    location.href="mailto:"+email;
    }
    else {
    href = "mailto:"+email+"?subject="+subject+"&body='"+body+"'";
    location.href=href
    }
    }

    function openCurrentApiView(endpoint) {
    var params = getUrlParams();

    delete params["pageNum"];
    delete params["pageSize"];
    params.view = 'admin';
    params.apiKey = 'HyDTfe2yMeS_dKYK8zSCc4p7qjwdXHUg';

    if(endpoint) {
    endpoint = "/"+endpoint;
    }

    window.open(getApiUrl()+(endpoint || '')+serializeUrlParams(params));
    }
</script>

<noscript><div class="warning message">This site requires JavaScript in order to function properly.  Please enable JavaScript in your browser to take full advantage of the features available.</div></noscript>

</div>


<div id="body">
  <div id="colWrapper" style="display: none">

    <div id="mainCol">

      


<!-- BREADCRUMB -->
<div id="breadcrumbs"><a href="/home">Home</a></div>

<script type="text/javascript">
  $(document).ready( function() {
    if(CURRENT_PATH_INFO.length > 1) {
      $("#breadcrumbs").append(' : {');

      var url = "";
      var link;
      for(var i = 0; i < CURRENT_PATH_INFO.length-1; i++) {
        var pathElem = CURRENT_PATH_INFO[i];
        var label = pathElem["display-type"] || pathElem["type"];
        var type = pathElem["type"];
        var name = pathElem["name"];
        var displayName = pathElem["displayName"];
        if (displayName == undefined) {
           displayName = name;
        }
        url += '/' + type + 's/' + name;
        link = '<span class="label">&nbsp;'+label+'</span> : "<a href="'+url+'">'+displayName+'</a>"';
        $("#breadcrumbs").append(link);
      }

      // delimit
      $("#breadcrumbs .label").not(":first").before('<span class="divider"/>');

      $("#breadcrumbs").append(' }');
    } 
  } );
</script>


      
      
        
      



  
  




<div style="display:none">
  
</div>

<script type="text/javascript">
  $(document).ready(function() {
    $(".messageCode:hidden").each(function() {
      var code = $(this).html().trim();
      var $content = $("div[messageCode="+code+"]");
      if($content.length) {
        $(this).html($content.html());
        $(this).show();
      }
    });
  });
</script>



      
        
        
      





      
      
        
      



  
    

    
    
    
      
    





  
    
    
      
        <div class="message success">
          
            
              pasrivas@syr.edu has been verified!
            
            
          
        </div>
      
    
  



    
    
    
      
      
    







    
    
    
      
      
    







    
  
  




<div style="display:none">
  
</div>

<script type="text/javascript">
  $(document).ready(function() {
    $(".messageCode:hidden").each(function() {
      var code = $(this).html().trim();
      var $content = $("div[messageCode="+code+"]");
      if($content.length) {
        $(this).html($content.html());
        $(this).show();
      }
    });
  });
</script>



      

      <div id="deployments">

        
        <div id="deploymentsSection" class="section">
          <h2>MongoDB Deployments</h2>
          
            <div class="h2ActionBtns">
              
                
                  
                  
                    <a class="button icon create" href="/create">Create new</a>
                    <a class="button icon clone" href="/clone">Clone existing</a>
                    <a class="button icon restore" href="/restore">Create from backup</a>
                  
                  
                
              
              
            </div>
          
          
            
              <div class="noData"></div>
            
            
          
        </div>


        
        
          <div id="remoteConnectionsSection" class="section">
            <h2>Remote Connections</h2>
            
            <div class="h2ActionBtns">
              
                
                  <a class="button icon add" onclick="openCreateConnectionDialog(event);" target="_blank">Add</a>
                
                
              
            </div>
            
              
                <div class="noData"></div>
              
              
            
            
            

<form action="/saveconnection" method="POST"
      id="saveConnectionDialog" title="Configure a remote connection" autocomplete="off" style="display:none;">

  
    
    
  





  <fieldset>
    <input type="hidden" name="r" value="/home"/>
    <input id="connectionId" type="hidden" name="id" value=""/>
    <div>
      <p>
        Remote Connections allow you to visualize and manage the data and database(s) on MongoDB servers running anywhere.
      </p>
      <p>
        From here you can configure a connection to (1) a remote database, (2) a remote mongod server process, or (3) a remote replica set.
      </p>
    </div>
    <div>
      <label>Name for this remote connection<span class="required"></span></label>
      <input class="required connectionName" type="text" name="connectionName" id="connectionName" value=""/>
    </div>
    <div>
      <label>URI<span class="required"></span> <span class="tip"><a id="uriHelpLink" href="javascript:showInlineHelp('uriHelp')">explain this</a></span></label>
      <input class="required" type="text" name="uri" id="uri" value=""/>
    </div>
    <div>
      <input id="storeCredentials" type="checkbox" name="storeCredentials" />
      <label>Save password? <span class="tip"><a id="isThisSecureLink" href="javascript:showInlineHelp('rememberPasswordHelp')">explain this</a></span></label>
    </div>
    <div class="metadataAgreement">
      <input class="required" type="checkbox" name="enableMetaData" id="enableMetaData"/>
      <label>
        I allow MongoLab to save configuration data in my remote database(s).<span class="required"></span>
        <span class="tip"><a id="enableMetaDataHelpLink" href="javascript:showInlineHelp('enableMetaDataHelp')">explain this</a></span>
      </label>
    </div>
    <div class="inlineHelp" id="enableMetaDataHelp" style="display: none;">
      <p>
        Certain MongoLab features and services will store configuration information into the database itself.
        For example, MongoLab allows you to save search queries for repeated use; when you create a Saved Search, the configuration for that query is stored in your database.
      </p>
      <p>
        This configuration data takes up a tiny amount of space and should not meaningfully affect the storage footprint of your database.  Furthermore we have isolated this data into special collections prefixed with <code>objectlabs-system</code> so there should be no impact on your data.  You can delete this information at any time by removing the <code>objectlabs-system</code> collections.
      </p>
      <p>
        By checking this checkbox, you acknowledge that you understand and allow us to save configuration data into your remote database(s).
      </p>

    </div>
    <div class="inlineHelp" id="connectionNameHelp" style="display:none;">
      <p>The <code>Connection name</code> uniquely identifies your remote connection in your MongoLab account.  It is used primarily for display purposes.</p>
    </div>
    <div class="inlineHelp" id="uriHelp" style="display: none;">
      <p>
        Enter a <code>URI</code> in the standard MongoDB connection string format (<a href="http://www.mongodb.org/display/DOCS/Connections">MongoDB reference</a>):
      <pre>  mongodb://[dbuser:dbpass@]host:port[/dbname]</pre>
      </p>
      <div class="tinyLineBreak"></div>
      <p>
        The <code>username</code>, <code>password</code> are optional - if the server you are connecting to requires authentication, you will be prompted for your credentials later even if you do not provide them now.  The <code>dbname</code> must be "admin" if you want to authenticate to an entire <code>mongod</code> server process.
      </p>
      <div class="tinyLineBreak"></div>
      <p>Example - connecting to a single database:
      <pre>  mongodb://[dbuser:dbpass@]example.com:12345[/dbname]</pre>
      </p>
      <p>Example - connecting to a server:
      <pre>  mongodb://[admindbuser:admindbpass@]example.com:12345[/admin]</pre>
      </p>
      <p>Example - connecting to a replica set cluster:
      <pre>  mongodb://[admindbuser:admindbpass@]example.com:12345,example2.com:12345[/admin]</pre>
      </p>
    </div>
    <div class="inlineHelp" id="rememberPasswordHelp" style="display:none;">
      <p>
        For security reasons, we do not store your database username and password in our system unless you check the <code>Save password?</code> checkbox.
      </p>
      <p>
        If you choose to save your database credentials in our system, you can be assured that your password will be encrypted and stored securely.  That being said, if your database contains sensitive information, we recommend that you do not save your password in our system.
      </p>
    </div>
  </fieldset>
</form>

<script type="application/javascript">
  function openCreateConnectionDialog(event) {
    closeInlineHelp();
    // initialize fields
    $("#saveConnectionDialog").validate().resetForm();
    $("#connectionId").val("");
    $("#uri").val("");
    $("#connectionName").val("");
    $(".metadataAgreement").show();
    $("#enableMetaData").attr("checked", false);
    $("#storeCredentials").attr("checked", false);
    openDialog('#saveConnectionDialog', event);
  }

  function openEditConnectionDialog(id, name, uri, store, event) {
    closeInlineHelp();
    $("#saveConnectionDialog").validate().resetForm();
    // set fields
    $("#connectionId").val(id);
    $("#uri").val(uri);
    $("#connectionName").val(name);
    $(".metadataAgreement").hide();
    $("#enableMetaData").attr("checked", true);
    $("#storeCredentials").attr("checked", store);
    openDialog('#saveConnectionDialog', event);
  }

  $(document).ready(function() {
    $("#uri").focus( function() { showInlineHelp('uriHelp'); } );
    $("#uriHelpLink").focus( function() { showInlineHelp('uriHelp'); } );
    $("#storeCredentials").focus( function() { showInlineHelp('rememberPasswordHelp'); } );
    $("#isThisSecureLink").focus( function() { showInlineHelp('rememberPasswordHelp'); } );
    $("#enableMetaDataHelpLink").focus( function() { showInlineHelp('enableMetaDataHelp'); } );
    $("#enableMetaData").focus( function() { showInlineHelp('enableMetaDataHelp'); } );
    $("#saveConnectionDialog").validate( {
      errorPlacement: function(error, element) {
        if(element.attr("type") == 'checkbox') {
          element.next('label').after(error);
        } else {
          element.after(error);
        }
      }
    } );

    $.validator.addMethod("connectionName", function (value, element) {
      var result = this.optional(element) || ( value.length < 64 && /^([A-Za-z0-9_-])*$/.test(value) );
      return result;
    }, "The connection name must have fewer than 64 characters and cannot have any spaces or special characters (hyphens and underscores are OK) in it.");


    initDialog("#saveConnectionDialog", "Save");
    $("#saveConnectionDialog").dialog("option", "width", 650);

    // open dialogs on errors
    if(PAGE_ERRORS['/saveconnection']) {
      openDialog('#saveConnectionDialog', null);
    }
  });
</script>

          </div>
        
        
        

      </div>



      

      
      
      <form action="/delete" method="POST" id="DbConstructionErrorDeleteForm" title="Error" style="display:none;">
        <div><!-- message goes here --></div>
        <input type="hidden" name="db" value=""/>
      </form>
      
      
      <form action="/deletecluster" method="POST" id="ClusterConstructionErrorDeleteForm" title="Error" style="display:none;">
        <div><!-- message goes here --></div>
        <input type="hidden" name="cluster" value=""/>
      </form>
      <script>
        $(document).ready(function() {
          initMsgDialog("#DbConstructionErrorDeleteForm", 458);
          initMsgDialog("#ClusterConstructionErrorDeleteForm", 458);
        });
      </script>

    </div> <!-- END #mainCol -->

    

<div class="helpTray">
  <a class="openHelp" onclick="HelpTray.openHelpTray();"><div class="openHelpButton"></div></a>
  <a class="closeHelp" onclick="HelpTray.closeHelpTray();"><div class="closeHelpButton"></div></a>
  <div class="defaultHelp">
    <h1></h1>
    
  </div>
</div>

<script type="application/javascript">
  var HelpTray = {

    getHelpDiv: function(topic) {
      if(topic) {
        var $help = $("div.helpTray>div[helpTopic="+topic+"]");
        if($help.length) {
          return $help;
        } else {
          return null;
        }
      } else {
        return $("div.helpTray>div.defaultHelp");
      }
    },

    openHelpTray: function(topic) {
      var $help = HelpTray.getHelpDiv(topic);
      if((topic && $help) || (!topic && !$("div.helpTray").hasClass("reveal"))) {
        // hide all help divs
        $("div.helpTray>div").hide();
        // show the specified one
        $help.show();
        // reveal the tray
        $("div.helpTray").addClass("reveal");
      }
    },

    closeHelpTray: function() {
      $("div.helpTray").removeClass("reveal");
    },

    addHelpTopic: function(topicId, title, paragraphs) {
      var $helpTray = $("div.helpTray");
      $helpTray.append('<div helpTopic="'+topicId+'"/>');
      HelpTray.appendHelpContent(topicId, title, paragraphs);
    },

    appendHelpContent: function(topicId, title, paragraphs) {
      var $help = HelpTray.getHelpDiv(topicId);
      if($help.length) {
        if(title) {
          $help.append('<h1>'+title+'</h1>');
        }
        if(paragraphs) {
          for(var i in paragraphs) {
            $help.append('<p>'+paragraphs[i]+'</p>');
          }
        }
      }
    },

    bindHelpTopic: function(topicId, query) {
      var $elem = query;
      if(typeof $elem == "string") {
        $elem = $(query);
      }
      if($elem.length) {
        $elem.addClass("helpBound link");
        $elem.click(function(event) {
          event.stopPropagation();
          HelpTray.openHelpTray(topicId);
        });
      }
    },

    setDefaultHelpTitle: function(title) {
      HelpTray.getHelpDiv().find("h1").html(title);
    },

    setDefaultHelpText: function(paragraphs) {
      // remove existing text
      var $help = HelpTray.getHelpDiv();
      $help.find("p").remove();
      // add new text
      for(var i in paragraphs) {
        $help.append('<p>'+paragraphs[i]+'</p>');
      }
    }
  };

  $(document).ready(function() {
    // move help tray to the top level of the DOM
    $("div.helpTray").appendTo($('body'));

    // close help tray when clicking away
    $('html').click(function() {
      HelpTray.closeHelpTray();
    });
    // don't close help tray when clicking on help tray
    $("div.helpTray").click(function(event) {
      event.stopPropagation();
    });
  });
</script>

    <script type="application/javascript">
      $(document).ready(function() {
        // populate help tray
        HelpTray.setDefaultHelpTitle("Account Home");
        var helpText = ["This is home base for your MongoLab account.  From this page, you can access each of your MongoDB deployments to view connection info, browse data, manage backups, etc.", "To connect to your database(s), use the connection info that is supplied on each database's home page.",
        "For additional help, please contact us at <a href='mailto:support@mongolab.com'>support@mongolab.com</a>."];
        
        HelpTray.setDefaultHelpText(helpText);

        HelpTray.addHelpTopic("fileSize", "File Size",
            [
              "The file size is the total size of the storage files used for this deployment.  This represents the overall storage footprint for the database(s) on disk.",
              "For servers running with the <code>smallfiles</code> option (we use this option on our Shared plans), the first file allocated is 16MB, the second 32MB, the third 64MB ... until 512MB is reached at which point each subsequent file is 512MB.",
              "To see more stats for a given database, please visit the \"Stats\" tab for that database.  Values are converted using powers of 1024 (versus 1000)."
            ]);
        HelpTray.bindHelpTopic("fileSize", $("#deploymentsTable th.fileSizeCol"));

        HelpTray.addHelpTopic("storageSize", "Size (data plus indexes)",
            [
              "The \"Size\" column represents the total size of all documents in this deployment, including the padding factor.  It also includes the total size of all the indexes.",
              "To see more stats for a given database, please visit the \"Stats\" tab for that database.  Values are converted using powers of 1024 (versus 1000)."
            ]);
        HelpTray.bindHelpTopic("storageSize", $("#deploymentsTable th.sizeCol"));
      });
    </script>

    <div class="clearer"></div>
  </div> <!-- END #colWrapper -->


  
  <!-- NOTE: the _setCustomVar for Google Analytics custom variables *must* go before the _trackPageview in the footer -->
  <!-- Google Analytics: Custom Variable -->
<!-- https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingCustomVariables -->
<script type="text/javascript">

  var domain = window.location.hostname
  if (domain.indexOf("mongolab.com") !== -1) {

  if (_gaq == undefined) {
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-307557-3']);
  }

  _gaq.push(['_setCustomVar',
    1,                // This custom var is set to slot #1.  Required parameter.
    'account_status', // The name of the custom variable.  Required parameter.
    'HAS_ACCOUNT',    // Sets the value of the custom variable.
    1                 // Sets the scope to visitor-level.
  ]);

  }
  else {
    console.debug("Did not push HAS_ACCOUNT to GA b/c domain doesn't contain mongolab.com...")
  }

</script>

<!-- Google: "Site Visitor" -->
<!-- Place the code for #2 (User) on pages that only signed in users see.  If there is a key page that all signed in users are likely to visit, you can put the code on that page only. -->
<script type="text/javascript">
  /* <![CDATA[ */
var google_conversion_id = 971843581;
var google_conversion_language = "en";
var google_conversion_format = "3";
var google_conversion_color = "ffffff";
var google_conversion_label = "4ScRCKPijQQQ_c-0zwM";
var google_conversion_value = 0;
/* ]]> */
</script>
<script type="text/javascript" src="https://www.googleadservices.com/pagead/conversion.js">
</script>
<noscript>
  <div style="display:inline;">
    <img height="1" width="1" style="border-style:none;" alt="" src="https://www.googleadservices.com/pagead/conversion/971843581/?value=0&amp;label=4ScRCKPijQQQ_c-0zwM&amp;guid=ON&amp;script=0"/>
  </div>
</noscript>

  
  

</div> <!-- END #body -->
<div id="footerWrapper" style="display: none">
  



    
      <div id="preFooterBar">
  <div class="wrap">
    <div class="logo">
      <a href="/"><img src="/base/img/mongolab-logo-146x38.png" height="38" width="146" alt="MongoLab" /></a>
    </div>
    <div class="links marketingContent" style="display:block;">
      <span class="message">Get 500 MB <strong>FREE</strong></span>
      <a onclick="gotoSignupWithSourceParam();" class="signup">Sign up</a>
    </div>
    <div class="clearer"></div>
  </div>
</div>

      <div id="footer">
  <div class="wrap">
    <div class="siteLinks">
      <ul>
        <li>
          <strong>Company</strong>
          <ul>
            <li class="marketingLinks"><a href="/company">About MongoLab</a></li>
            <li><a href="http://blog.mongolab.com" target="_blank">Blog</a></li>
            <li><a href="http://mongolab.org" target="_blank">Open-source Projects</a></li>
          </ul>
        </li>
        <li class="marketingLinks">
          <strong>Plans</strong>
          <ul>
            <li><a href="/plans">Features</a></li>
            <li><a href="/plans/pricing">Pricing</a></li>
          </ul>
        </li>
        <li style="margin-left:-38px;">
          <strong>Support</strong>
          <ul>
            <li><a href="http://status.mongolab.com">MongoLab Status</a></li>
            <li><a href="http://docs.mongolab.com">Documentation</a></li>
            <li><a href="https://support.mongolab.com/anonymous_requests/new">Ask a Question</a></li>
          </ul>
        </li>
        <li>
          <strong>Clouds</strong>
          <ul>
            <li><a href="/aws">Amazon (AWS)</a></li>
            <li><a href="/lp/mongodb-on-azure">Azure</a></li>
            <li><a href="/google">Google</a></li>
            <li><a href="https://www.joyent.com/products/compute-service">Joyent</a></li>
            <li><a href="http://www.rackspace.com/cloud/">Rackspace</a></li>
          </ul>
        </li>
        <li class="share">
          <strong>Community</strong>
          <ul>
            <li>
              <a style="margin-right:3px;" href="https://twitter.com/mongolab"><img src="/base/img/icon_twitter.png" width="26" height="26" /></a>
              <a style="margin-right:3px;" href="https://www.facebook.com/MongoLab"><img src="/base/img/icon_facebook.png" width="26" height="26" /></a>
              <a href="https://plus.google.com/+MongoLab"><img src="/base/img/icon_googleplus.png" width="24" height="24" style="margin-left:2px; margin-bottom:2px;"/></a>
            </li>
          </ul>
        </li>
<li><font size=1><a href="https://safeharbor.export.gov/list.aspx" target=â_blankâ>We self-certify </br>compliance with:</font></a>
          <a href="http://export.gov/safeharbor/" target="_blank"><img src="/base/img/safe-harbor.png" alt="U.S.-EU & U.S.-Swiss Safe Harbor" /></a>
        </li>
      </ul>
    </div>
    <div class="clearer"></div>
    <div class="powered">
      <a href="http://mongodb.org" target="_blank"><img src="/base/img/powered-by-mongoDB.png" alt="powered by MongoDB" /></a>
    </div>
    <div class="copyright">
      &copy; 2014 <a style="margin-left:0px;"href="http://objectlabs.com">ObjectLabs Corporation</a> <a href="/company/legal/tos">Terms of Service</a><a href="/company/legal/privacy">Privacy Policy</a>
    </div>
    <div class="clearer"></div>
  </div>
</div>

<script type="text/javascript">
<!-- begin SnapEngage code -->
  // SnapEngage widget
  // (please note additional changes to this widget in portal's footer.jsp file)
  (function() {
    var se = document.createElement('script'); se.type = 'text/javascript'; se.async = true;
    se.src = '//commondatastorage.googleapis.com/code.snapengage.com/js/43487a64-584c-49c5-a8c9-1766b6316043.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(se, s);
  })();
<!-- end SnapEngage code -->

  var domain = window.location.hostname
  if (domain.indexOf("mongolab.com") !== -1) {

  // Google Analytics tracker for mongolab.com
  if (_gaq == undefined) {
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-307557-3']);
    _gaq.push(['_trackPageview']);
  }
  else {
    _gaq.push(['_trackPageview']);
  }
  }
  else {
    console.debug("Did not push trackPageview to GA b/c domain doesn't contain mongolab.com...")
  }

  (function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>




      <!-- set user email in SnapEngage widget -->
      
        <script type="text/javascript">
          // SnapEngage widget
          // (please this is also in footer.html)
          (function() {
            var se = document.createElement('script'); se.type = 'text/javascript'; se.async = true;
            se.src = '//commondatastorage.googleapis.com/code.snapengage.com/js/43487a64-584c-49c5-a8c9-1766b6316043.js';
            var done = false;
            se.onload = se.onreadystatechange = function() {
              if (!done&&(!this.readyState||this.readyState==='loaded'||this.readyState==='complete')) {
                done = true;
                SnapABug.setUserEmail('pasrivas@syr.edu', true);
              }
            };
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(se, s);
          })();
        </script>
      
    
    


<!-- if logged in hide signup-related links-->

    <script type="text/javascript">hideSignupRelatedLinks();</script>


<!-- hide products/pricing pages if it's not ok to see them -->






</div>
</body>



<script type="text/javascript">

  function getSubscriptionUrl(type, id) {
    var $row = getSubscriptionRow(id);
    if($row.hasClass("subscriptionStatus-error")) {
      return null;
    }
    var url = "/"+$row.attr("linkId");
    if(type == "db" || type == "database") {
      url = "/databases"+url;
    } else if(type == "cluster") {
      url = "/clusters"+url;
    } else if(type == "server") {
      url = "/servers"+url;
    } else if(type == "remote") {
      url = "/connections"+url;
    } else {
      return null;
    }
    return url;
  }

  function linkifyCell($cell, link) {
    $cell.html('<a href="'+link+'">'+$cell.html()+'</a>')
  }

  function toggleStatusDetail(subId) {
    var $row = getSubscriptionRow(subId);
    // only operate if the expander button is visible
    if($row.length && $row.find(".expanderCol .expanderIcon:visible").length) {
      if($row.hasClass("showDetail")) {
        $row.removeClass("showDetail");
      } else {
        $row.addClass("showDetail");
      }
      syncAllStatusToggler();
    }
  }

  function syncAllStatusToggler() {
    var $toggler = $("tr.headers .expanderIcon");
    var $table = $("#deploymentsTable");
    var numStatus = $table.find("tr.subscriptionRow .expanderIcon:visible").length;
    if(numStatus) {
      var numOpen = $table.find("tr.subscriptionRow.showDetail .statusDetail").length;
      if(numStatus > numOpen) {
        $toggler.css("visibility", "visible");
      } else {
        $toggler.css("visibility", "hidden");
      }
    } else {
      $toggler.css("visibility", "hidden");
    }
  }

  function showAllStatus() {
    if($("#deploymentsTable .expanderIcon:visible").length) {
      $("#deploymentsTable tr.subscriptionRow").each(function() {
        showStatusDetail($(this).attr("subscriptionId"));
      });
    }
  }

  function hideAllStatus() {
    if($("#deploymentsTable .expanderIcon:visible").length) {
      $("#deploymentsTable tr.subscriptionRow").each(function () {
        hideStatusDetail($(this).attr("subscriptionId"));
      });
    }
  }

  function showStatusDetail(subId) {
    var $row = getSubscriptionRow(subId);
    // only operate if the expander button is visible
    if($row.length && $row.find(".expanderCol .expanderIcon:visible").length) {
      if(!$row.hasClass("showDetail")) {
        $row.addClass("showDetail");
        syncAllStatusToggler();
      }
    }
  }

  function hideStatusDetail(subId) {
    var $row = getSubscriptionRow(subId);
    // only operate if the expander button is visible
    if($row.length && $row.find(".expanderCol .expanderIcon:visible").length) {
      if($row.hasClass("showDetail")) {
        $row.removeClass("showDetail");
        syncAllStatusToggler();
      }
    }
  }

  // asynchronously fetch all statuses
  function loadAllSubscriptionStatuses() {
    $("#deploymentsTable tr.subscriptionStatus-loading").each(function() {
      loadSubscriptionRowStatus($(this));
    });
  }

  function loadSubscriptionRowStatus($row) {
    var id = $row.attr("subscriptionId");
    var type = $row.attr("subscriptionType");
    if(type === "cluster") {
      HomeLanding.loadCluster(id, "HyDTfe2yMeS_dKYK8zSCc4p7qjwdXHUg");
    } else if (type == "db") {
      HomeLanding.loadDatabaseSubscription(id, "HyDTfe2yMeS_dKYK8zSCc4p7qjwdXHUg");
    }
  }

  function revealContent() {
    $("#colWrapper").show();
    $("#footerWrapper").show();
  }

  $(document).ready(function() {
    var $table = $("#deploymentsTable");

    // linkify the clickable cells
    $table.find("tr.subscriptionRow").each(function() {
      var link = getSubscriptionUrl($(this).attr("subscriptionType"), $(this).attr("subscriptionId"));
      $(this).find(".linkCol").each(function() {
        linkifyCell($(this), link);
      });
    });

    //linkify remote connection rows
    $("#remoteConnectionsTable").find("tr.subscriptionRow").each(function() {
      var link = "/connections/"+$(this).find(".idCol").html();
      $(this).find(".linkCol").each(function() {
        linkifyCell($(this), link);
      });
    });

    revealContent();

    syncAllStatusToggler();
    loadAllSubscriptionStatuses();

    // set up tooltips
    $table.find("td").mousemove(function(event) {
      var $tooltip = $(this).find(".tooltip");
      if($tooltip.length) {
        $tooltip.css("left", (event.clientX+20)+"px");
        $tooltip.css("top", (event.clientY-10)+"px");
      }
    });

    // listen for status changes
    $table.find("tr").on("updateStatus", function(event) {
      syncAllStatusToggler();
    });
  });
</script>
