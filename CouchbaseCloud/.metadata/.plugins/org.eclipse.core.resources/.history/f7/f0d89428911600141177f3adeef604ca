
# Create your views here.

from django.shortcuts import render_to_response
from django.contrib.auth import authenticate, login

from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse

from libcloud.compute.types import Provider
from libcloud.compute.providers import get_driver


from couchbase import Couchbase


@csrf_exempt
def auth_user(request):
    state = "Please log in below..."
    return render_to_response('auth.html',{'state':state})

@csrf_exempt
def login_user(request):
    state = "Please log in below..."
    username = password = ''
    if request.POST:
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                state = "You're successfully logged in!"
            else:
                state = "Your account is not active, please contact the site admin."
        else:
            state = "Your username and/or password were incorrect."
            return render_to_response("message.html",{'state':state, 'username': username})

    return render_to_response("auth.html",{'state':state, 'username': username})

@csrf_exempt
def register_user(request):
    return render_to_response('registration.html')


@csrf_exempt
def create_account(request):
    return render_to_response('deployments.html')

@csrf_exempt
def couchdep(request):
    
    cb=Couchbase.connect(bucket="default", host="127.0.0.1", port="8080")
    
    key = "{0}-{1}".format(
        new_beer['brewery_id'],
        new_beer['name'].replace(' ', '_').lower())
    
    cb.set()
    return render_to_response('couchdbdep.html')


@csrf_exempt
def deploy(request):
    
    
    cls = get_driver(Provider.EC2_AP_SOUTHEAST2)

    AWS_EC2_ACCESS_ID = "AKIAISOWOEXV4THB2KZQ"
    AWS_EC2_SECRET_KEY = "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"

    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)

    sizes = driver.list_sizes()

    images = driver.list_images()


    MY_SIZE = 'm1.small'
    MY_IMAGE = 'ami-934ddea9'

    size = [s for s in sizes if s.id == MY_SIZE][0]
    image = [i for i in images if i.id == MY_IMAGE][0]

    print size
    print image


    node = driver.create_node(name="My Instance", image=image, size=size)

    print node
    return HttpResponse("Deployment Successful")