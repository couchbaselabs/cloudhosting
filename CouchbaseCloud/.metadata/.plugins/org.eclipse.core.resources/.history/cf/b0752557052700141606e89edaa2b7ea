from azure import *
from azure.servicemanagement import *
import base64
import os

import time

def timestamp():
   now = time.time()
   localtime = time.localtime(now)
   milliseconds = '%03d' % int((now - int(now)) * 1000)
   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds

def AzureHandler(request):
    
    subscription_id = request['subid']
    certificate_path = '/tmp/azurekey'
    
    sms = ServiceManagementService(subscription_id, certificate_path)

    image_name1='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'
    
    
    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/piush9-piush9-2014-08-16.vhd'
    
    
    location = 'East US'
    linux_user_id='azureuser'
    linux_config = LinuxConfigurationSet('piush9', 'azureuser',user_password=None,disable_ssh_password_authentication=True)
    
    
    azure_config = "/Users/piush" + '/.azure'
    cert_data_path = azure_config + "/myCert.pfx"
    with open(cert_data_path, "rb") as bfile:
        cert_data = base64.b64encode(bfile.read())
    
    cert_format = 'pfx'
    cert_password = ''
    cert_res = sms.add_service_certificate(service_name=name,
                                data=cert_data,
                                certificate_format=cert_format,
                                password=cert_password)
    
    vars(cert_res)
    time.sleep(60)
    
    
    azure_config = "/Users/piush" + '/.azure'
    thumbprint_path = azure_config + '/thumbprint'
    authorized_keys = "/home/" + linux_user_id + "/.ssh/authorized_keys" 
    try:
        thumbprint=open(thumbprint_path, 'r').readline().split('\n')[0]
    except:
        thumbprint=None
    
    thumbprint
    
    publickey = PublicKey(thumbprint, authorized_keys)
    linux_config.ssh.public_keys.public_keys.append(publickey)
    
    print vars(publickey)
    print vars(linux_config.ssh.public_keys.public_keys.list_type)
    
    
    
    print vars(linux_config.ssh.public_keys)
    print vars(linux_config.ssh.key_pairs)
    
    os_hd  = OSVirtualHardDisk(image_name1, media_link)
    
    print vars(os_hd)
    
    network = ConfigurationSet()
    network.configuration_set_type = 'NetworkConfiguration'
    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))
    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', '8091', '8091'))
    
    
    
    name = 'piush9'
    result = sms.create_virtual_machine_deployment(service_name=name,
        deployment_name=name,
        deployment_slot='production',
        label=name,
        role_name=name,
        system_config=linux_config,
        network_config=network,
        os_virtual_hard_disk=os_hd,
        role_size='Large')
    
    request_id = result.request_id
    print request_id
    print result
    
    print vars(linux_config.ssh.public_keys)
    print vars(linux_config.ssh.key_pairs)
    
    time.sleep (60)
    status = sms.get_operation_status(request_id)
    try:
        print vars(status.error)
    except:
        print vars(status)
    
    service_name = name
    deployment_name = name
    props = sms.get_deployment_by_name(service_name, deployment_name)
    vars(props)
    
    result = sms.list_locations()
    for location in result:
        print(location.name)
    
    role = sms.get_role(service_name=name, deployment_name=name, role_name=name)
    print role
